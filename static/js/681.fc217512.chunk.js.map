{"version":3,"file":"static/js/681.fc217512.chunk.js","mappings":";4MAqDA,UA5CgB,WAEZ,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAgBR,OAbAE,EAAAA,EAAAA,YAAU,YACVC,EAAAA,EAAAA,IAAgBC,OAAOJ,IAClBK,MAAK,SAAEP,GACJC,EAAgBD,EAAaQ,QAChC,IACAC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EAAMG,SAClBC,EAAAA,GAAAA,MAAA,2FAA+BJ,EAAMG,SAAW,CAAEE,SAAU,aAAcC,UAAW,KACxF,GACJ,GAAE,CAACd,IAICF,GAMD,6BACMA,EAAaiB,QAEX,wBACKjB,EAAakB,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACd,2BACI,0CAAgBD,MAChB,cAAGE,MAAO,CAAEC,aAAc,QAA1B,SAAqCF,MAFhCD,EADK,OAQtB,cAAGE,MAAO,CAAEE,WAAY,QAAxB,yDAjBD,IAqBd,6MC7CKC,EAAW,+BACXC,EAAU,mCAMVC,EAAe,eAIfC,EAAe,QACfC,EAAW,OAEXC,EAAe,QACfC,EAAU,UAEVC,EAAe,QACfC,EAAU,UAKVC,EAAK,UAAMT,EAAN,YAnBU,mBAmBV,oBAA0CC,GACrDd,QAAQC,IAAI,UAAWqB,GAEvB,IAAMC,EAAK,UAAMV,EAAN,YAAkBE,EAAlB,oBAA0CD,EAA1C,iCAlBG,SAkBH,iBAjBE,EAiBF,wBACXd,QAAQC,IAAI,UAAWsB,GAEvB,IAAMC,EAAK,UAAMX,EAAN,YAAkBG,EAAlB,YAAkCC,EAAlC,oBAAsDH,EAAtD,mBACXd,QAAQC,IAAI,UAAWuB,GAEvB,IAAMC,EAAK,UAAMZ,EAAN,YAAkBK,EAAlB,YAAkCD,EAAlC,YAA8CE,EAA9C,oBAAiEL,EAAjE,mBACXd,QAAQC,IAAI,UAAWwB,GAEvB,IAAMC,EAAK,UAAMb,EAAN,YAAkBO,EAAlB,YAAkCH,EAAlC,YAA8CI,EAA9C,oBAAiEP,EAAjE,gCA1BE,GAiCN,SAAea,IAAtB,4CAAO,iIACoBC,IAAAA,IAAUN,GAD9B,cACGO,EADH,OAEKhC,EAAYgC,EAASC,KAArBjC,QAFL,kBAGIA,GAHJ,kEASA,SAAekC,EAAtB,+CAAO,sCAA+BC,GAA/B,yFACoBJ,IAAAA,IAAA,UAAaf,EAAb,YAAyBE,EAAzB,oBAAiDD,EAAjD,iCAAiFkB,EAAjF,gCADpB,cACGH,EADH,OAEKhC,EAAYgC,EAASC,KAArBjC,QAFL,kBAGIA,GAHJ,mEASA,SAAeoC,EAAtB,+CAAO,sCAA+BhB,GAA/B,uFACoBW,IAAAA,IAAA,UAAaf,EAAb,YAAyBG,EAAzB,YAAyCC,EAAzC,oBAA6DH,EAA7D,oBADpB,cACGe,EADH,yBAEIA,EAASC,MAFb,mEAQA,SAAeI,EAAtB,+CAAO,sCAA4BjB,GAA5B,uFACoBW,IAAAA,IAAA,UAAaf,EAAb,YAAyBK,EAAzB,YAAyCD,EAAzC,YAAqDE,EAArD,oBAAwEL,EAAxE,oBADpB,cACGe,EADH,yBAEIA,EAASC,MAFb,mEAQA,SAAepC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BuB,GAA/B,uFACoBW,IAAAA,IAAA,UAAaf,EAAb,YAAyBO,EAAzB,YAAyCH,EAAzC,YAAqDI,EAArD,oBAAwEP,EAAxE,gCApEd,IAmEN,cACGe,EADH,yBAEIA,EAASC,MAFb,mEAxCP9B,QAAQC,IAAI,UAAWyB","sources":["components/Reviews.jsx","fakeAPI.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nimport { toast } from 'react-toastify';\n\nimport { getMovieReviews } from \"fakeAPI\";\n\n\n\nconst Reviews = () => {\n    //! useState ===> **** (аналог this.state.****)\n    const [movieReviews, setMovieReviews] = useState([]);\n    \n    const { id } = useParams();\n\n\n    useEffect(() => {\n    getMovieReviews(Number(id))\n        .then(( movieReviews ) => { \n            setMovieReviews(movieReviews.results);\n        })\n        .catch(error => {\n            console.log(error.message); //!\n            toast.error(`Ошибка запроса: ${error.message}`, { position: \"top-center\", autoClose: 2000 } ); \n        })\n    }, [id]);\n\n\n    //! Проверка results на пустой объект\n    if (!movieReviews) {\n        return null;  \n    }\n\n\n    return (\n        <section>\n            {(movieReviews.length)\n                ?\n                <ul>\n                    {movieReviews.map(({ author, content }) => (\n                        <li key={author}>\n                            <h4>{`Author: ${author}`}</h4>\n                            <p style={{ paddingRight: \"24px\" }}>{content}</p>\n                        </li>\n                    ))}\n                </ul>\n                :\n                <p style={{ marginLeft: \"10px\" }}>We don't have any reviews for this movie.</p>\n            } \n        </section>\n    );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Константы для URL-запросов:\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '41b230c5977baa736e324532e16fdadb';\n\n\nconst END_POINTS_1 = \"trending/all/day\" //!  /trending/movie/week ==> список ВСЕХ самых популярных фильмов на сегодня ЗА ДЕНЬ для создания коллекции на главной странице.\n// const END_POINTS_1 = \"trending/movie/week\" //!  /trending/movie/week ==> список <movie> самых популярных фильмов на сегодня ЗА НЕДЕЛЮ для создания коллекции на главной странице.\n\nconst END_POINTS_2 = \"search/movie\" //!  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\nconst query = \"avatar\" //?\nconst page = 1; //? можно добавить в строку запроса\n\nconst END_POINTS_3 = \"movie\" //!  /movies/get-movie-details ==> запрос полной информации о фильме для страницы кинофильма.\nconst movie_id = 616037 //?\n\nconst END_POINTS_4 = \"movie\" //!  /movies/get-movie-credits  ==> запрос информации об актёрском составе для страницы кинофильма.\nconst CREDITS = \"credits\"\n\nconst END_POINTS_5 = \"movie\" //!  /movies/get-movie-reviews ==> запрос обзоров для страницы кинофильма.\nconst REVIEWS = \"reviews\"\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем строки URL-запросов:\nconst url_1 = `${BASE_URL}/${END_POINTS_1}?api_key=${API_KEY}`;\nconsole.log(\"url_1: \", url_1); //!\n\nconst url_2 = `${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`;\nconsole.log(\"url_2: \", url_2); //!\n\nconst url_3 = `${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_3: \", url_3); //!\n\nconst url_4 = `${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_4: \", url_4); //!\n\nconst url_5 = `${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`;\nconsole.log(\"url_5: \", url_5); //!\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем URL-запросы:\n//! 1 \nexport async function getTrendingAllDay() {\n    const response = await axios.get(url_1) //! 1 \n    const { results } = response.data\n    return results;\n}\n\n\n\n//! 2 \nexport async function getSearchMovies(query) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`) //!\n    const { results } = response.data //*  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\n    return results;\n}\n\n\n\n//! 3 \nexport async function getMovieDetails(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`) //!\n    return response.data;\n}\n\n\n\n//! 4 \nexport async function getMovieCast(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`) //!\n    return response.data;\n}\n\n\n\n//! 5 \nexport async function getMovieReviews(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`) //!\n    return response.data;\n}\n"],"names":["useState","movieReviews","setMovieReviews","id","useParams","useEffect","getMovieReviews","Number","then","results","catch","error","console","log","message","toast","position","autoClose","length","map","author","content","style","paddingRight","marginLeft","BASE_URL","API_KEY","END_POINTS_2","END_POINTS_3","movie_id","END_POINTS_4","CREDITS","END_POINTS_5","REVIEWS","url_1","url_2","url_3","url_4","url_5","getTrendingAllDay","axios","response","data","getSearchMovies","query","getMovieDetails","getMovieCast"],"sourceRoot":""}