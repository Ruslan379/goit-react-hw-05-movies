{"version":3,"file":"static/js/856.23ddb290.chunk.js","mappings":"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","sources":["fakeAPI.js","webpack://react-homework-template/./src/components/Searchbar.module.css?2a61","components/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Константы для URL-запросов:\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '41b230c5977baa736e324532e16fdadb';\n\n\nconst END_POINTS_1 = \"trending/all/day\" //!  /trending/movie/week ==> список ВСЕХ самых популярных фильмов на сегодня ЗА ДЕНЬ для создания коллекции на главной странице.\n// const END_POINTS_1 = \"trending/movie/week\" //!  /trending/movie/week ==> список <movie> самых популярных фильмов на сегодня ЗА НЕДЕЛЮ для создания коллекции на главной странице.\n\nconst END_POINTS_2 = \"search/movie\" //!  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\nconst query = \"avatar\" //?\nconst page = 1; //? можно добавить в строку запроса\n\nconst END_POINTS_3 = \"movie\" //!  /movies/get-movie-details ==> запрос полной информации о фильме для страницы кинофильма.\nconst movie_id = 616037 //?\n\nconst END_POINTS_4 = \"movie\" //!  /movies/get-movie-credits  ==> запрос информации об актёрском составе для страницы кинофильма.\nconst CREDITS = \"credits\"\n\nconst END_POINTS_5 = \"movie\" //!  /movies/get-movie-reviews ==> запрос обзоров для страницы кинофильма.\nconst REVIEWS = \"reviews\"\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем строки URL-запросов:\nconst url_1 = `${BASE_URL}/${END_POINTS_1}?api_key=${API_KEY}`;\nconsole.log(\"url_1: \", url_1); //!\n\nconst url_2 = `${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`;\nconsole.log(\"url_2: \", url_2); //!\n\nconst url_3 = `${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_3: \", url_3); //!\n\nconst url_4 = `${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_4: \", url_4); //!\n\nconst url_5 = `${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`;\nconsole.log(\"url_5: \", url_5); //!\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем URL-запросы:\n//! 1 \nexport async function getTrendingAllDay() {\n    const response = await axios.get(url_1) //! 1 \n    const { results } = response.data\n    return results;\n}\n\n\n\n//! 2 \nexport async function getSearchMovies(query) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`) //!\n    const { results } = response.data //*  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\n    return results;\n}\n\n\n\n//! 3 \nexport async function getMovieDetails(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`) //!\n    return response.data;\n}\n\n\n\n//! 4 \nexport async function getMovieCast(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`) //!\n    return response.data;\n}\n\n\n\n//! 5 \nexport async function getMovieReviews(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`) //!\n    return response.data;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"Searchbar_Searchbar__WRZnT\",\"SearchForm\":\"Searchbar_SearchForm__yRiNg\",\"SearchFormButton\":\"Searchbar_SearchFormButton__WO7HP\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__zRaGF\",\"SearchFormInput\":\"Searchbar_SearchFormInput__eSeBg\"};","import { useState } from 'react';\nimport { ImSearch } from 'react-icons/im';\nimport PropTypes from 'prop-types';\n\nimport { toast } from 'react-toastify';\n\nimport css from 'components/Searchbar.module.css' \n\n\n\nconst Searchbar = ({onSubmit}) => {\n  //! useState ===> query (аналог this.state.query)\n  const [query, setQuery] = useState('');\n\n\n  //! Запись в state значения поля инпут\n  const handleChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase());\n  };\n\n\n  //! Submit ФОРМЫ, провека на \"\", передача пропса this.state.query в App\n  const handleSubmit = event => {\n    event.preventDefault();\n    //! Проверка на пустую строку в инпуте\n    if (event.target.elements.query.value.trim() === '') {\n      toast.error('Поле не должно быть пустым');\n      event.target.reset()\n      return;\n    };\n    //! Передача значения (query) в App\n    onSubmit(query); //?\n    //! Очистка поля инпута\n    event.target.reset()\n  };\n\n\n  return (\n    <header\n      className={css.Searchbar}\n    >\n      <form\n        className={css.SearchForm}\n        onSubmit={handleSubmit}\n      >\n        <input\n          className={css.SearchFormInput}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          onChange={handleChange}\n        />\n\n        <button\n          type=\"submit\"\n          className={css.SearchFormButton}\n        >\n          <ImSearch style={{ marginRight: 8 }} />\n          <span\n            // className={css.SearchFormButtonLabel1}\n          >\n            Search\n          </span>\n        </button>\n      </form>\n    </header>\n  );\n}\n\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { getSearchMovies } from \"fakeAPI\";\nimport Searchbar from 'components/Searchbar';\n\n\n\n\nconst Movies = () => {\n  const location = useLocation();\n  //! useState ===> **** (аналог this.state.****)\n  const [results, setResults] = useState([]);\n\n\n  //! Хук useSearchParams - записыват значение из инпута (из query) \n  //! в URL - строку запроса и хранит его всвоем объекте параметров\n  const [searchParams, setSearchParams] = useSearchParams();\n  \n\n  const handleFormSubmit = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n\n  const query = searchParams.get(\"query\") ?? '';\n\n\n\n\n  useEffect(() => {\n    //! Первый рендер, если query - это пустая строка, то НЕ ДЕЛАЕМ HTTP-запрос\n    if (!query) {\n      return;\n    };\n    //! Запрос, название фильма - это query\n    getSearchMovies(query)\n      .then(( results ) => { \n        //! Проверка на неправильный запрос\n        if (results.length === 0) {\n          toast.warning(`Нет такого фильма: ${query}`);\n          setResults([]);\n          return;\n        }\n        setResults(results); \n      })\n      .catch(error => {\n          console.log(error.message); //!\n          toast.error(`Ошибка запроса: ${error.message}`, { position: \"top-center\", autoClose: 2000 } ); \n      })\n  }, [query]);\n  \n\n  //! Проверка results на пустой объект\n  if (!results) {\n    return null;  \n  }\n  \n  return (\n    <main>\n      <Searchbar onSubmit={handleFormSubmit} />\n\n      {results.length > 0 && (\n        <div>\n          {results.map(({ id, title, name }) => (\n            <Link key={id} to={`${id}`} state={{ from: location }}>\n              {/* <p>{title}</p> */}\n              {/* <p>{title || name}</p> */}\n              <p>{(title) ? title.toUpperCase() : name}</p>\n            </Link>\n          ))}\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n\n"],"names":["BASE_URL","API_KEY","END_POINTS_2","END_POINTS_3","movie_id","END_POINTS_4","CREDITS","END_POINTS_5","REVIEWS","url_1","console","log","url_2","url_3","url_4","url_5","getTrendingAllDay","axios","response","results","data","getSearchMovies","query","getMovieDetails","getMovieCast","getMovieReviews","onSubmit","useState","setQuery","className","css","event","preventDefault","target","elements","value","trim","toast","reset","type","name","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","style","marginRight","location","useLocation","setResults","useSearchParams","searchParams","setSearchParams","get","useEffect","then","length","catch","error","message","position","autoClose","map","id","title","to","state","from","toUpperCase"],"sourceRoot":""}