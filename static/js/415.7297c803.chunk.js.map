{"version":3,"file":"static/js/415.7297c803.chunk.js","mappings":";4TAMMA,EAAW,+BACXC,EAAU,mCAMVC,EAAe,eAIfC,EAAe,QACfC,EAAW,OAEXC,EAAe,QACfC,EAAU,UAEVC,EAAe,QACfC,EAAU,UAKVC,EAAK,UAAMT,EAAN,YAlBU,mBAkBV,oBAA0CC,GACrDS,QAAQC,IAAI,UAAWF,GAEvB,IAAMG,EAAK,UAAMZ,EAAN,YAAkBE,EAAlB,oBAA0CD,EAA1C,iCAlBG,SAkBH,iBAjBE,EAiBF,wBACXS,QAAQC,IAAI,UAAWC,GAEvB,IAAMC,EAAK,UAAMb,EAAN,YAAkBG,EAAlB,YAAkCC,EAAlC,oBAAsDH,EAAtD,mBACXS,QAAQC,IAAI,UAAWE,GAEvB,IAAMC,EAAK,UAAMd,EAAN,YAAkBK,EAAlB,YAAkCD,EAAlC,YAA8CE,EAA9C,oBAAiEL,EAAjE,mBACXS,QAAQC,IAAI,UAAWG,GAEvB,IAAMC,EAAK,UAAMf,EAAN,YAAkBO,EAAlB,YAAkCH,EAAlC,YAA8CI,EAA9C,oBAAiEP,EAAjE,gCA1BE,GAiCN,SAAee,IAAtB,4CAAO,iIAUoBC,IAAAA,IAAUR,GAV9B,cAUGS,EAVH,OAeKC,EAAYD,EAASE,KAArBD,QAfL,kBAqBIA,GArBJ,kEA2BA,SAAeE,EAAtB,+CAAO,sCAA+BC,GAA/B,yFACoBL,IAAAA,IAAA,UAAajB,EAAb,YAAyBE,EAAzB,oBAAiDD,EAAjD,iCAAiFqB,EAAjF,gCADpB,cACGJ,EADH,OAMKC,EAAYD,EAASE,KAArBD,QANL,kBAYIA,GAZJ,mEAkBA,SAAeI,EAAtB,+CAAO,sCAA+BnB,GAA/B,uFACoBa,IAAAA,IAAA,UAAajB,EAAb,YAAyBG,EAAzB,YAAyCC,EAAzC,oBAA6DH,EAA7D,oBADpB,cACGiB,EADH,yBAOIA,EAASE,MAPb,mEAaA,SAAeI,EAAtB,+CAAO,sCAA4BpB,GAA5B,uFACoBa,IAAAA,IAAA,UAAajB,EAAb,YAAyBK,EAAzB,YAAyCD,EAAzC,YAAqDE,EAArD,oBAAwEL,EAAxE,oBADpB,cACGiB,EADH,yBAOIA,EAASE,MAPb,mEAaA,SAAeK,EAAtB,+CAAO,sCAA+BrB,GAA/B,uFACoBa,IAAAA,IAAA,UAAajB,EAAb,YAAyBO,EAAzB,YAAyCH,EAAzC,YAAqDI,EAArD,oBAAwEP,EAAxE,gCAzGd,IAwGN,cACGiB,EADH,yBAOIA,EAASE,MAPb,mEA7EPV,QAAQC,IAAI,UAAWI,iHC+BvB,UA7Da,WACX,IAAMW,GAAWC,EAAAA,EAAAA,MAEjB,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBU,EAAhB,KAuCA,OApCAC,EAAAA,EAAAA,YAAU,YAKRd,EAAAA,EAAAA,MACGe,MAAK,SAAEZ,GAUAU,GAAW,SAAAG,GAAS,wBAAQA,IAAR,OAAsBb,GAAtB,GAU3B,IACAc,OAAM,SAAAC,GAGHxB,QAAQC,IAAIuB,EAAMC,SAClBC,EAAAA,GAAAA,MAAA,2FAA+BF,EAAMC,SAAW,CAAEE,SAAU,aAAcC,UAAW,KACxF,GACJ,GAAE,KAID,6BACE,4CACA,yBACGnB,EAAQoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OAGH,SAAC,KAAD,CAAeC,GAAE,iBAAYH,GAAMI,MAAO,CAAEC,KAAMnB,GAAlD,UAEE,uBAAIe,GAASC,KAFJF,EAHR,QAapB","sources":["fakeAPI.js","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Константы для URL-запросов:\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '41b230c5977baa736e324532e16fdadb';\n\n// const API_KEY = '28759369-3882e1068ac26fe18d14affeb'; //! не мой!\n\nconst END_POINTS_1 = \"trending/all/day\" //!  /trending/all/day ==> список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n\nconst END_POINTS_2 = \"search/movie\" //!  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\nconst query = \"avatar\" //?\nconst page = 1; //? можно добавить в строку запроса\n\nconst END_POINTS_3 = \"movie\" //!  /movies/get-movie-details ==> запрос полной информации о фильме для страницы кинофильма.\nconst movie_id = 616037 //?\n\nconst END_POINTS_4 = \"movie\" //!  /movies/get-movie-credits  ==> запрос информации об актёрском составе для страницы кинофильма.\nconst CREDITS = \"credits\"\n\nconst END_POINTS_5 = \"movie\" //!  /movies/get-movie-reviews ==> запрос обзоров для страницы кинофильма.\nconst REVIEWS = \"reviews\"\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем строки URL-запросов:\nconst url_1 = `${BASE_URL}/${END_POINTS_1}?api_key=${API_KEY}`;\nconsole.log(\"url_1: \", url_1); //!\n\nconst url_2 = `${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`;\nconsole.log(\"url_2: \", url_2); //!\n\nconst url_3 = `${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_3: \", url_3); //!\n\nconst url_4 = `${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`;\nconsole.log(\"url_4: \", url_4); //!\n\nconst url_5 = `${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`;\nconsole.log(\"url_5: \", url_5); //!\n\n\n//!-----------------------------------------------------------------------------------------------------------------------------------------------------------\n//! Формируем URL-запросы:\n//! 1 \nexport async function getTrendingAllDay() {\n\n    //                                   https://api.themoviedb.org/3/movie/19995/reviews?api_key=41b230c5977baa736e324532e16fdadb&language=en-US&page=1\n    //                                   https://api.themoviedb.org/3/movie/19995/credits?api_key=41b230c5977baa736e324532e16fdadb&language=en-US\n    //!                                  https://api.themoviedb.org/3/movie/19995/images?api_key=41b230c5977baa736e324532e16fdadb&language=en-US\n    //                                   https://api.themoviedb.org/3/movie/19995?api_key=41b230c5977baa736e324532e16fdadb&language=en-US\n    // const response = await axios.get(\"https://api.themoviedb.org/3/authentication/token/new?api_key=41b230c5977baa736e324532e16fdadb\") //!  /a temporary request token\n    // const response = await axios.get(\"https://api.themoviedb.org/3/movie/550?api_key=41b230c5977baa736e324532e16fdadb\") //! пример\n    // const response = await axios.get(\"https://api.themoviedb.org/3/trending/all/day?api_key=41b230c5977baa736e324532e16fdadb\") //!  /trending/all/day\n\n    const response = await axios.get(url_1) //! 1 \n    // const all = await response.data //?\n    // console.log(\"axios response.data: \", response.data); //!\n    // console.log(\"all: \", all); //?\n\n    const { results } = response.data //!  /trending/all/day ==> список самых популярных фильмов на сегодня\n    // console.log(\"axios results: \", results); //!\n    // console.log(\"axios total_pages: \", total_pages); //!\n\n    // return total_pages;\n    // return response.data;\n    return results;\n}\n\n\n\n//! 2 \nexport async function getSearchMovies(query) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_2}?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`) //!\n    // const all = await response.data //?\n    // console.log(\"axios response.data: \", response.data); //!\n    // console.log(\"all: \", all); //?\n\n    const { results } = response.data //*  /search/search-movies ==> поиск кинофильма по ключевому слову на странице фильмов.\n    // console.log(\"axios results: \", results); //!\n    // console.log(\"axios total_pages: \", total_pages); //!\n\n    // return total_pages;\n    // return response.data;\n    return results;\n}\n\n\n\n//! 3 \nexport async function getMovieDetails(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_3}/${movie_id}?api_key=${API_KEY}&language=en-US`) //!\n    // const all = await response.data //?\n    // console.log(\"axios response.data: \", response.data); //!\n    // console.log(\"getMovieDetails all: \", all); //?\n\n    // return all;\n    return response.data;\n}\n\n\n\n//! 4 \nexport async function getMovieCast(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_4}/${movie_id}/${CREDITS}?api_key=${API_KEY}&language=en-US`) //!\n    // const all = await response.data //?\n    // console.log(\"axios response.data: \", response.data); //!\n    // console.log(\"getMovieDetails all: \", all); //?\n\n    // return all;\n    return response.data;\n}\n\n\n\n//! 5 \nexport async function getMovieReviews(movie_id) {\n    const response = await axios.get(`${BASE_URL}/${END_POINTS_5}/${movie_id}/${REVIEWS}?api_key=${API_KEY}&language=en-US&page=${page}`) //!\n    // const all = await response.data //?\n    // console.log(\"axios response.data: \", response.data); //!\n    // console.log(\"getMovieDetails all: \", all); //?\n\n    // return all;\n    return response.data;\n}\n\n\n\n//todo OLD\n// const products = [\n//     { id: \"h-1\", name: \"Hoodie 1\" },\n//     { id: \"h-2\", name: \"Hoodie 2\" },\n//     { id: \"h-3\", name: \"Hoodie 3\" },\n//     { id: \"s-1\", name: \"Sneakers 1\" },\n//     { id: \"s-2\", name: \"Sneakers 2\" },\n//     { id: \"s-3\", name: \"Sneakers 3\" },\n//     { id: \"s-4\", name: \"Sneakers 4\" },\n//     { id: \"p-1\", name: \"Pants 1\" },\n//     { id: \"p-2\", name: \"Pants 2\" },\n//     { id: \"p-3\", name: \"Pants 3\" }\n// ];\n\n// export const getProducts = () => {\n//     return products;\n// };\n\n// export const getProductById = (productId) => {\n//     return products.find((product) => product.id === productId);\n// };\n","// import { useState, useEffect, useLayoutEffect } from 'react'; \nimport { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\n\nimport { getTrendingAllDay } from \"fakeAPI\";\n\n\n\n\n\nconst Home = () => {\n  const location = useLocation();\n  //! useState ===> **** (аналог this.state.****)\n  const [results, setResults] = useState([]);\n  // const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Первый рендер, если results - это пустая строка, то НЕ ДЕЛАЕМ HTTP-запрос\n    // if (!results) {\n    //   return;\n    // };\n    getTrendingAllDay()\n      .then(( results ) => { \n        // console.log(\"getTrendingAllDa results: \", results); //!\n          // if (results.length === 0) {  \n            // toast.warning(`Нет такой темы`); \n            // setHits([]);\n            // return;\n          // } else {\n            // if (page === 1) {\n            //   toast.success(`По вашей теме найдено ${totalHits} изображений`, { autoClose: 3000 });\n            // };\n              setResults(prevState => [...prevState, ...results]);\n\n            // };\n          // endOfCollection - это цифра еще НЕ ПРОСМОТРЕННЫХ элементов коллекции\n          // console.log(\"endOfCollection: \", endOfCollection); //!\n          // if (endOfCollection <= 0) {\n          //   toast.info('Вы достигли конца результатов поиска', { autoClose: 3000 }); \n          //   setShowButton(false); //! Кнопка LOAD MORE => ПРЯЧЕМ\n          //   return;\n          // }\n      })\n      .catch(error => {\n          // setIsLoading(false);\n          // setError(error.message);\n          console.log(error.message); //!\n          toast.error(`Ошибка запроса: ${error.message}`, { position: \"top-center\", autoClose: 2000 } ); \n      })\n  }, []);\n  \n  \n  return (\n    <main>\n      <h1>Trending today</h1>\n      <div>\n        {results.map(({ id, title, name }) => (\n              // <ul>\n                // <li key={id}>\n                  <Link key={id} to={`movies/${id}`} state={{ from: location }}>\n                    {/* <p>{title}</p> */}\n                    <p>{title || name}</p>\n                  </Link>\n              // </li>\n            // </ul>\n            ))}\n        </div>\n    </main>\n  );\n};\n\nexport default Home;\n\n\n\n\n  //todo old            \n  // return (\n  //   <main>\n  //     <h1>Trending today</h1>\n  //     <div>\n  //           {results.map((result) => (\n  //               <div key={result.id}>\n  //                 <Link to={`movies/${result.id}`}>\n  //                   {/* <p>{result.title}</p> */}\n  //                   <p>{result.title || result.name}</p>\n  //                 </Link>\n  //               </div>\n  //           ))}\n  //       </div>\n  //   </main>\n  // );\n\n\n\n\n\n"],"names":["BASE_URL","API_KEY","END_POINTS_2","END_POINTS_3","movie_id","END_POINTS_4","CREDITS","END_POINTS_5","REVIEWS","url_1","console","log","url_2","url_3","url_4","url_5","getTrendingAllDay","axios","response","results","data","getSearchMovies","query","getMovieDetails","getMovieCast","getMovieReviews","location","useLocation","useState","setResults","useEffect","then","prevState","catch","error","message","toast","position","autoClose","map","id","title","name","to","state","from"],"sourceRoot":""}